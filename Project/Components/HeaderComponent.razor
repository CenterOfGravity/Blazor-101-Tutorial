@inject NavigationManager NavigationManager
@inject IJSRuntime js

<div class="headercomponent">
    <i class="bi bi-layout-text-sidebar" @onclick="SidebarIconOnClick"></i>

    <img class="logo"
         src="http://pngimg.com/uploads/amazon/amazon_PNG11.png" />

    <div class="address">
        <i class="bi bi-geo-alt"></i>
        <span class="text-line-one">Enviar a Chile</span>
        <span class="text-line-two">Calle 123456</span>
    </div>

    <div class="theme-selector" @onclick="ThemeSelectorOnClick">
        @if (IsLightModeActive == false)
        {
            <i class="bi bi-moon"></i>
        }
        else
        {
            <i class="bi bi-brightness-high"></i>
        }
    </div>

    <div class="search">
        <select class="select-search">
            <option selected="selected" value="Todos">Todos</option>
            <option value="Perfumes">Perfumes</option>
        </select>
        <input class="input-search" placeholder="<--seleccione una categoria" />
        <button class="search-button">
            <i class="bi bi-search"></i>
        </button>
    </div>

    <div class="sign-in" @onclick="GoToSignInPageOnClick">
        <span class="text-line-one">@(string.IsNullOrEmpty(Name) ? "Hola Bienvenido" : "Hola " +Name)</span>
        <span class="text-line-two">Inicia Sesion <i class="bi bi-caret-down-fill"></i></span>
    </div>

    <div class="return-orders">
        <span class="text-line-one">Retornos</span>
        <span class="text-line-two">& Pedidos</span>
    </div>

    <div class="cart">
        <i class="bi bi-cart"></i>
        <span class="cart-items-counter">0</span>
    </div>

</div>


@*DarkModeCode-Start*@
@code {
    private bool IsLightModeActive;

    [Parameter]
    public EventCallback<bool> NotifyThemeStyle { get; set; }

    private async void ThemeSelectorOnClick()
    {
        IsLightModeActive = !IsLightModeActive;
        await NotifyThemeStyle.InvokeAsync(IsLightModeActive);
    }
}
@*DarkModeCode-End*@


@*SidebarCode-Start*@
@code{

    [Parameter]
    public EventCallback NotifySidebarIconClicked { get; set; }

    private async void SidebarIconOnClick()
    {
       await  NotifySidebarIconClicked.InvokeAsync();
    }
}
@*SidebarCode-End*@



@*SignInCode-Start*@
@code{
    private void GoToSignInPageOnClick()
    {
        NavigationManager.NavigateTo("SignInPage");
    }
}
@*SignInCode-End*@


@*LifeCycleEvents-Start*@
@code {
    private DotNetObjectReference<HeaderComponent>? ObjRef;
    private string Name = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        //OnAuthStateChangedCode-Start
        if (string.IsNullOrEmpty(Name))
        {
            ObjRef = DotNetObjectReference.Create(this);
            Console.WriteLine("OnInitializedAsync :" + Name);
            await js.InvokeVoidAsync("OnAuthStateChanged", ObjRef);
        }
        //OnAuthStateChangedCode-End
    }

    [JSInvokable("JSInvokableOnAuthStateChanged")]
    public void JSInvokableOnAuthStateChanged(string name)
    {
        if (!string.IsNullOrEmpty(name))
        {
            Name = name;
            Console.WriteLine("JSInvokableOnAuthStateChanged :" + Name);
            StateHasChanged();
        }
    }
}
@*LifeCycleEvents-End*@