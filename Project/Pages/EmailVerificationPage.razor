@layout EmptyLayout
@page "/EmailVerificationPage/{Email}"
@inject IJSRuntime js
@implements IDisposable
@using System.ComponentModel.DataAnnotations;


<img class="logo"
     src='https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Amazon_logo.svg/1024px-Amazon_logo.svg.png' />

<div class='email-verification'>
    <h2>Verifica Tu Correo</h2>

    <p>
        Para verificar su correo, le hemos enviado  un correo de verificación a:
        @Email<a @onclick="ShowChangeEmailContainerOnClick">(cambiar correo)</a>
    </p>

    <a class="@ResentEmailCssClass" @onclick="ReSendEmailVerificationOnClick">Volver a enviar correo de verificación</a>
    @if (Seconds != 61)
    {
        <div> (espere @Seconds segundos)</div>
    }


</div>

<div class='ir-pagina-principal'>Ir a página principal</div>

@if (IsChangeEmailContainerVisible)
{
    <div class='cambiar-correo'>
        <div class="line">
            <h5>Cambiar Correo</h5>
        </div>

        <EditForm Model="emailVerificationClassModel">
            <DataAnnotationsValidator />

            <label>Correo Nuevo:</label>
            <InputText type='email' class="input-text" @bind-Value="emailVerificationClassModel.Email" />
            <ValidationMessage For="@(() => emailVerificationClassModel.Email)" />

            <input type='submit' value="Confirmar nuevo correo" />
        </EditForm>
    </div>
}

@*ChangeEmailCode-Start*@
@code {
    private bool IsChangeEmailContainerVisible;

    private void ShowChangeEmailContainerOnClick()
    {
        IsChangeEmailContainerVisible = !IsChangeEmailContainerVisible;
    }

    private class EmailVerificationClassModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
    }

    private EmailVerificationClassModel emailVerificationClassModel = new EmailVerificationClassModel();
}
@*ChangeEmailCode-End*@

@code {
    [Parameter]
    public string Email { get; set; } = string.Empty;
}


@*ReSendEmailVerification-Start*@
@using System.Timers;
@code {
    private Timer Timer = new Timer(1000);
    private int Seconds = 61;
    private string ResentEmailCssClass = string.Empty;

    private async void ReSendEmailVerificationOnClick()
    {
        if (Timer.Enabled == false)
        {
            await GetSecondsFromLocalStorage(false);
            await js.InvokeAsync<string>("SendEmailVerification", true);
        }
    }

    private async void TimerEvent(Object source, ElapsedEventArgs e)
    {
        Seconds = Seconds - 1;
        await js.InvokeVoidAsync("LocalStorageSetItem", "ResentEmailSeconds", Seconds);
        if (Seconds <= 0)
        {
            Seconds = 61;
            await js.InvokeVoidAsync("LocalStorageRemoveItem", "ResentEmailSeconds");
            ResentEmailCssClass = string.Empty;
            Timer.Enabled = false;
        }
        StateHasChanged();
    }

    private async Task GetSecondsFromLocalStorage(bool IsFromOnInitializedAsync)
    {
        string? LocalStorageSeconds = await js.InvokeAsync<string>("LocalStorageGetItem", "ResentEmailSeconds");
        if (!string.IsNullOrEmpty(LocalStorageSeconds))
        {
            int ParsedSeconds = Int32.Parse(LocalStorageSeconds);
            if (ParsedSeconds < 61 && ParsedSeconds > 0)
            {
                Seconds = ParsedSeconds;

                if (IsFromOnInitializedAsync == true)
                {
                    ResentEmailCssClass = "resent-email-blocked-style";
                    Timer.Enabled = true;
                }
            }
        }

        if (IsFromOnInitializedAsync == false)
        {
            Timer.Enabled = true;
            ResentEmailCssClass = "resent-email-blocked-style";
        }

    }
}
@*ReSendEmailVerification-End*@



@*ComponentLifeCycleMethods-Start*@
@code {
    protected async override Task OnInitializedAsync()
    {
        Timer.Elapsed += TimerEvent;
        await GetSecondsFromLocalStorage(true);
    }

    public void Dispose()
    {
        Timer?.Dispose();
    }
}
@*ComponentLifeCycleMethods-Start*@
